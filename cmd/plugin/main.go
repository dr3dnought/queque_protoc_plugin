package main

import (
	"strings"

	"github.com/dr3dnought/queque_protoc_plugin/pkg"
	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a queque.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	go func() {
		filename := file.GeneratedFilenamePrefix + "_queque.utils.pb.go"

		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-queque. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()
		pkg.GenerateUtils(g)
	}()

	for _, e := range file.Messages {
		// Check valid
		filename := file.GeneratedFilenamePrefix + "_queque." + strings.ToLower(string(e.Desc.Name())) + ".pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-queque. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()
		pkg.GenerateClient(g, e)
	}
}
